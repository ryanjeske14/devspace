{"version":3,"sources":["AppContext.js","components/Utils/Utils.js","services/token-service.js","services/idle-service.js","config.js","components/Header/Header.js","components/LandingPage/LandingPage.js","components/ValidationError/ValidationError.js","services/portfolio-api-service.js","components/Dashboard/Dashboard.js","routes/AddProjectPage/AddProjectPage.js","routes/EditProjectPage/EditProjectPage.js","services/auth-api-service.js","components/LoginForm/LoginForm.js","routes/LoginPage/LoginPage.js","components/RegistrationForm/RegistrationForm.js","routes/RegistrationPage/RegistrationPage.js","components/Utils/PublicOnlyRoute.js","components/Utils/PrivateRoute.js","components/NotFoundPage/NotFoundPage.js","components/App/App.js","index.js"],"names":["AppContext","React","createContext","loggedIn","setLoggedIn","user","setUser","Hyph","react_default","a","createElement","className","Button","_ref2","props","Object","objectWithoutProperties","assign","join","Input","_ref4","Required","_ref5","Section","_ref6","list","classes","filter","Boolean","_timeoutId","config","TokenService","saveAuthToken","token","window","localStorage","setItem","getAuthToken","getItem","clearAuthToken","console","info","removeItem","hasAuthToken","makeBasicAuthToken","userName","password","btoa","concat","parseJwt","jwt","jwtDecode","parseAuthToken","authToken","readJwtToken","_getMsUntilExpiry","payload","exp","Date","now","queueCallbackBeforeExpiry","callback","msUntilExpiry","setTimeout","clearCallbackBeforeExpiry","clearTimeout","_idleCallback","_notIdleEvents","IdleService","setIdleCallback","idleCallback","resetIdleTimer","regiserIdleTimerResets","forEach","event","document","addEventListener","unRegisterIdleResets","removeEventListener","Header","handleLogoutClick","_callee","regenerator_default","wrap","_context","prev","next","_this","context","stop","react_router_dom","to","onClick","this","destination","renderLogoutLink","renderLoginLink","Component","contextType","LandingPage","role","ValidationError","hasError","id","message","Fragment","PortfolioApiService","getPortfolioData","username","fetch","then","res","ok","json","e","Promise","reject","getSkills","createProject","name","description","skills","github_url","demo_url","image_url","method","headers","content-type","authorization","body","JSON","stringify","updateUserData","full_name","title","bio","linkedin_url","email_address","projects","Dashboard","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","preventDefault","sub","_this$state","state","setState","successMessage","catch","err","error","theme_color","fullNameValid","titleValid","bioValid","githubValid","linkedinValid","emailValid","formValid","validationMessages","fullName","github","linkedin","email","_this2","_this3","validateFullName","_this4","validateTitle","_this5","validateBio","_this6","validateGitHub","_this7","validateLinkedIn","_this8","validateEmail","fieldValue","fieldErrors","objectSpread","trim","length","includes","test","_this9","_this$state2","onSubmit","htmlFor","type","value","onChange","updateFullName","target","ValidationError_ValidationError","updateTitle","updateBio","updateGitHub","updateLinkedIn","updateEmail","disabled","map","project","key","AddProjectPage","history","push","nameValid","descriptionValid","demoValid","imageValid","demo","image","skillsList","validateName","validateDescription","checked","skillId","skill","validateDemo","validateImage","placeholder","updateName","updateDescription","updateSkills","updateDemo","updateImage","EditProjectPage","AuthApiService","postUser","postRefreshToken","postLogin","_ref","user_name","log","LoginForm","handleSubmitJwtAuth","ev","_ev$target","onLoginSuccess","required","aria-required","aria-label","aria-describedby","defaultProps","LoginPage","handleLoginSuccess","_this$props","location","jwtPayload","from","sent","user_id","LoginForm_LoginForm_LoginForm","RegistrationForm","onRegistrationSuccess","RegistrationPage","handleRegistrationSuccess","RegistrationForm_RegistrationForm_RegistrationForm","PublicOnlyRoute","component","react_router","render","componentProps","PrivateRoute","pathname","NotFoundPage","App","logoutFromIdle","contextValue","src_AppContext","Provider","Header_Header_Header","exact","path","ReactDOM","components_App_App","getElementById"],"mappings":"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","file":"static/js/main.96acd363.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst AppContext = React.createContext({\r\n  loggedIn: false,\r\n  setLoggedIn: () => {},\r\n  user: {},\r\n  setUser: () => {}\r\n});\r\n\r\nexport default AppContext;\r\n","import React from \"react\";\r\nimport { format as formatDate } from \"date-fns\";\r\nimport \"./Utils.css\";\r\n\r\nexport function NiceDate({ date, format = \"Do MMMM YYYY\" }) {\r\n  return formatDate(date, format);\r\n}\r\n\r\nexport function Hyph() {\r\n  return <span className=\"Hyph\">{\" - \"}</span>;\r\n}\r\n\r\nexport function Button({ className, ...props }) {\r\n  return <button className={[\"Button\", className].join(\" \")} {...props} />;\r\n}\r\n\r\nexport function Textarea({ className, ...props }) {\r\n  return <textarea className={[\"Textarea\", className].join(\" \")} {...props} />;\r\n}\r\n\r\nexport function Input({ className, ...props }) {\r\n  return <input className={[\"Input\", className].join(\" \")} {...props} />;\r\n}\r\n\r\nexport function Required({ className, ...props }) {\r\n  return (\r\n    <span className={[\"Required\", className].join(\" \")} {...props}>\r\n      &#42;\r\n    </span>\r\n  );\r\n}\r\n\r\nexport function Section({ className, list, ...props }) {\r\n  const classes = [\"Section\", list && \"Section--list\", className]\r\n    .filter(Boolean)\r\n    .join(\" \");\r\n  return <section className={classes} {...props} />;\r\n}\r\n","import jwtDecode from \"jwt-decode\";\r\nimport config from \"../config\";\r\n\r\nlet _timeoutId;\r\nconst _TEN_SECONDS_IN_MS = 10000;\r\n\r\nconst TokenService = {\r\n  saveAuthToken(token) {\r\n    window.localStorage.setItem(config.TOKEN_KEY, token);\r\n  },\r\n  getAuthToken() {\r\n    return window.localStorage.getItem(config.TOKEN_KEY);\r\n  },\r\n  clearAuthToken() {\r\n    console.info(\"clearing the auth token\");\r\n    window.localStorage.removeItem(config.TOKEN_KEY);\r\n  },\r\n  hasAuthToken() {\r\n    return !!TokenService.getAuthToken();\r\n  },\r\n  makeBasicAuthToken(userName, password) {\r\n    return window.btoa(`${userName}:${password}`);\r\n  },\r\n  parseJwt(jwt) {\r\n    return jwtDecode(jwt);\r\n  },\r\n  parseAuthToken() {\r\n    const authToken = TokenService.getAuthToken();\r\n    if (authToken) return TokenService.parseJwt(authToken);\r\n    else return undefined;\r\n  },\r\n  readJwtToken() {\r\n    return TokenService.parseJwt(TokenService.getAuthToken());\r\n  },\r\n  _getMsUntilExpiry(payload) {\r\n    /*\r\n      payload is from the JWT\r\n      the `exp` value is in seconds, need to convert to ms, so * 1000\r\n      calculates the difference between now and when the JWT will expire\r\n    */\r\n    return payload.exp * 1000 - Date.now();\r\n  },\r\n  queueCallbackBeforeExpiry(callback) {\r\n    /* get the number of ms from now until the token expires */\r\n    const msUntilExpiry = TokenService._getMsUntilExpiry(\r\n      TokenService.readJwtToken()\r\n    );\r\n    /*\r\n      queue a callback that will happen 10 seconds before the token expires\r\n      the callback is passed in as an argument so could be anything,\r\n        in this app, the callback is for calling the refresh endpoint\r\n    */\r\n    _timeoutId = setTimeout(callback, msUntilExpiry - _TEN_SECONDS_IN_MS);\r\n  },\r\n  clearCallbackBeforeExpiry() {\r\n    clearTimeout(_timeoutId);\r\n  }\r\n};\r\n\r\nexport default TokenService;\r\n","/*\r\n  Idle Service\r\n   this service manages when a user has gone idle (not interacting with the page).\r\n*/\r\n\r\nlet _timeoutId;\r\nlet _idleCallback = null;\r\nlet _notIdleEvents = [\r\n  \"mousedown\",\r\n  \"mousemove\",\r\n  \"keypress\",\r\n  \"scroll\",\r\n  \"touchstart\"\r\n];\r\nlet _FIVE_MINUTES_IN_MS = 15 * 60 * 1000;\r\n\r\nconst IdleService = {\r\n  setIdleCallback(idleCallback) {\r\n    /* store a callback to call when the user goes idle */\r\n    _idleCallback = idleCallback;\r\n  },\r\n  /* called when a user interacts with the page */\r\n  resetIdleTimer() {\r\n    /* remove any timeouts as the user just interacted */\r\n    clearTimeout(_timeoutId);\r\n    /* queue the callback to happen 5 minutes from now */\r\n    _timeoutId = setTimeout(_idleCallback, _FIVE_MINUTES_IN_MS);\r\n  },\r\n  regiserIdleTimerResets() {\r\n    /* register the resetIdleTimer for events when a user interacts with page */\r\n    _notIdleEvents.forEach(event =>\r\n      document.addEventListener(event, IdleService.resetIdleTimer, true)\r\n    );\r\n  },\r\n  unRegisterIdleResets() {\r\n    /* remove any queued callbacks and events that will queue callbacks */\r\n    clearTimeout(_timeoutId);\r\n    _notIdleEvents.forEach(event =>\r\n      document.removeEventListener(event, IdleService.resetIdleTimer, true)\r\n    );\r\n  }\r\n};\r\n\r\nexport default IdleService;\r\n","export default {\r\n  API_ENDPOINT: \"http://localhost:8000/api\",\r\n  TOKEN_KEY: \"devspace-auth-token\"\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Hyph } from \"../Utils/Utils\";\r\nimport AppContext from \"../../AppContext\";\r\nimport TokenService from \"../../services/token-service\";\r\nimport IdleService from \"../../services/idle-service\";\r\nimport \"./Header.css\";\r\n\r\nexport default class Header extends Component {\r\n  static contextType = AppContext;\r\n\r\n  handleLogoutClick = async () => {\r\n    TokenService.clearAuthToken();\r\n    // when logging out, clear the callbacks to the refresh api and idle auto logout\r\n    TokenService.clearCallbackBeforeExpiry();\r\n    IdleService.unRegisterIdleResets();\r\n    await this.context.setLoggedIn();\r\n    await this.context.setUser({});\r\n  };\r\n\r\n  renderLogoutLink() {\r\n    return (\r\n      <div className=\"logged-in\">\r\n        <Link to=\"/dashboard\">Dashboard</Link>\r\n        <Hyph />\r\n        <Link onClick={this.handleLogoutClick} to=\"/\">\r\n          Logout\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderLoginLink() {\r\n    return (\r\n      <div className=\"not-logged-in\">\r\n        <Link to=\"/register\">Register</Link>\r\n        <Hyph />\r\n        <Link to=\"/login\">Login</Link>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const destination = this.context.loggedIn ? \"/dashboard\" : \"/\";\r\n\r\n    return (\r\n      <nav className=\"Header\">\r\n        <div className=\"logo\">\r\n          <Link to={destination}>Home</Link>\r\n        </div>\r\n        {this.context.loggedIn\r\n          ? this.renderLogoutLink()\r\n          : this.renderLoginLink()}\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./LandingPage.css\";\r\n\r\nexport default class LandingPage extends Component {\r\n  render() {\r\n    return (\r\n      <section className=\"landing\">\r\n        <header role=\"banner\">\r\n          <h1>Devspace</h1>\r\n          <h2>let your work be seen</h2>\r\n        </header>\r\n\r\n        <section className=\"landing_section\">\r\n          <h2>A portfolio builder for web developers</h2>\r\n          <p>\r\n            Are you a web developer? Do you have projects or prior work\r\n            experience that you want to share? Devspace provides a quick and\r\n            easy-to-use platform for building your very own portfolio site where\r\n            you can tell your story, demo your work, and help you connect with\r\n            others.\r\n          </p>\r\n        </section>\r\n\r\n        <section className=\"landing_section\">\r\n          <h2>Tell your story</h2>\r\n          <p>\r\n            [<em>placeholder for screenshot</em>]\r\n          </p>\r\n          <p>\r\n            Fill out some basic information about yourself, your background, and\r\n            anything you want other developers to know about you.\r\n          </p>\r\n        </section>\r\n\r\n        <section className=\"landing_section\">\r\n          <h2>Demo your projects</h2>\r\n          <p>\r\n            [<em>placeholder for screenshot</em>]\r\n          </p>\r\n          <p>\r\n            Devspace makes it easy to demo your projects. All you have to do is\r\n            fill out a few simple fields, select the technologies you used,\r\n            upload a screenshot of your app, and the rest is done for you!\r\n          </p>\r\n        </section>\r\n\r\n        <section className=\"landing_section\">\r\n          {/* \r\n            <h3>Get Started</h3>\r\n            <p>Register below to start making your portfolio site today!</p>\r\n           */}\r\n          <section className=\"get_started_section\">\r\n            <h2 className=\"get_started\">\r\n              <Link to=\"/dashboard\">GET STARTED</Link>\r\n            </h2>\r\n          </section>\r\n          {/* <form class=\"signup-form\">\r\n            <div>\r\n              <label for=\"full_name\">Full name</label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"full_name\"\r\n                id=\"full_name\"\r\n                placeholder=\"Full Name\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <label for=\"user_name\">User name</label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"user_name\"\r\n                id=\"user_name\"\r\n                placeholder=\"User Name\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <label for=\"password\">Password</label>\r\n              <input\r\n                type=\"password\"\r\n                name=\"password\"\r\n                id=\"password\"\r\n                placeholder=\"Password\"\r\n              />\r\n            </div>\r\n            <button type=\"submit\">Sign Up</button>\r\n          </form> */}\r\n        </section>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./ValidationError.css\";\r\nexport default function ValidationError(props) {\r\n  if (props.hasError) {\r\n    return (\r\n      <div className=\"error\" id={props.id}>\r\n        {props.message}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return <></>;\r\n}\r\n\r\nValidationError.propTypes = {\r\n  hasError: PropTypes.bool,\r\n  message: PropTypes.string\r\n};\r\n","import TokenService from \"./token-service\";\r\nimport config from \"../config\";\r\n\r\nconst PortfolioApiService = {\r\n  getPortfolioData(username) {\r\n    return fetch(`${config.API_ENDPOINT}/portfolio/${username}`).then(res =>\r\n      !res.ok ? res.json().then(e => Promise.reject(e)) : res.json()\r\n    );\r\n  },\r\n\r\n  getSkills() {\r\n    return fetch(`${config.API_ENDPOINT}/skills`).then(res =>\r\n      !res.ok ? res.json().then(e => Promise.reject(e)) : res.json()\r\n    );\r\n  },\r\n\r\n  createProject(name, description, skills, github_url, demo_url, image_url) {\r\n    return fetch(`${config.API_ENDPOINT}/projects`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"content-type\": \"application/json\",\r\n        authorization: `bearer ${TokenService.getAuthToken()}`\r\n      },\r\n      body: JSON.stringify({\r\n        name,\r\n        description,\r\n        skills,\r\n        github_url,\r\n        demo_url,\r\n        image_url\r\n      })\r\n    }).then(res => {\r\n      !res.ok ? res.json().then(e => e.Promise.reject(e)) : res.json();\r\n    });\r\n  },\r\n\r\n  updateUserData(\r\n    username,\r\n    full_name,\r\n    title,\r\n    bio,\r\n    github_url,\r\n    linkedin_url,\r\n    email_address,\r\n    projects\r\n  ) {\r\n    return fetch(`${config.API_ENDPOINT}/users/${username}`, {\r\n      method: \"PATCH\",\r\n      headers: {\r\n        \"content-type\": \"application/json\",\r\n        authorization: `bearer ${TokenService.getAuthToken()}`\r\n      },\r\n      body: JSON.stringify({\r\n        full_name,\r\n        title,\r\n        bio,\r\n        github_url,\r\n        linkedin_url,\r\n        email_address,\r\n        projects\r\n      })\r\n    }).then(res => (!res.ok ? res.json().then(e => Promise.reject(e)) : res));\r\n  }\r\n};\r\n\r\nexport default PortfolioApiService;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport AppContext from \"../../AppContext\";\r\nimport TokenService from \"../../services/token-service\";\r\nimport ValidationError from \"../../components/ValidationError/ValidationError\";\r\nimport PortfolioApiService from \"../../services/portfolio-api-service\";\r\nimport \"./Dashboard.css\";\r\n\r\nexport default class Dashboard extends Component {\r\n  static contextType = AppContext;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      full_name: \"\",\r\n      title: \"\",\r\n      bio: \"\",\r\n      theme_color: \"\",\r\n      github_url: \"\",\r\n      linkedin_url: \"\",\r\n      email_address: \"\",\r\n      projects: [],\r\n      fullNameValid: true,\r\n      titleValid: true,\r\n      bioValid: true,\r\n      githubValid: true,\r\n      linkedinValid: true,\r\n      emailValid: true,\r\n      formValid: true,\r\n      validationMessages: {\r\n        fullName: \"\",\r\n        title: \"\",\r\n        bio: \"\",\r\n        github: \"\",\r\n        linkedin: \"\",\r\n        email: \"\"\r\n      },\r\n      successMessage: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (TokenService.hasAuthToken()) {\r\n      const username = TokenService.parseAuthToken().sub;\r\n      PortfolioApiService.getPortfolioData(username).then(user => {\r\n        this.setState({\r\n          full_name: user.full_name,\r\n          title: user.title,\r\n          bio: user.bio,\r\n          theme_color: user.theme_color,\r\n          github_url: user.github_url,\r\n          linkedin_url: user.linkedin_url,\r\n          email_address: user.email_address,\r\n          projects: user.projects\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  updateFullName(full_name) {\r\n    this.setState({ full_name, successMessage: \"\" }, () =>\r\n      this.validateFullName(full_name)\r\n    );\r\n  }\r\n\r\n  updateTitle(title) {\r\n    this.setState({ title, successMessage: \"\" }, () =>\r\n      this.validateTitle(title)\r\n    );\r\n  }\r\n\r\n  updateBio(bio) {\r\n    this.setState({ bio, successMessage: \"\" }, () => this.validateBio(bio));\r\n  }\r\n\r\n  updateGitHub(github_url) {\r\n    this.setState({ github_url, successMessage: \"\" }, () =>\r\n      this.validateGitHub(github_url)\r\n    );\r\n  }\r\n\r\n  updateLinkedIn(linkedin_url) {\r\n    this.setState({ linkedin_url, successMessage: \"\" }, () =>\r\n      this.validateLinkedIn(linkedin_url)\r\n    );\r\n  }\r\n\r\n  updateEmail(email_address) {\r\n    this.setState({ email_address, successMessage: \"\" }, () =>\r\n      this.validateEmail(email_address)\r\n    );\r\n  }\r\n\r\n  validateFullName(fieldValue) {\r\n    const fieldErrors = { ...this.state.validationMessages };\r\n    let hasError = false;\r\n\r\n    fieldValue = fieldValue.trim();\r\n    if (fieldValue.length < 2) {\r\n      fieldErrors.fullName = \"Full name must be at least 2 characters long.\";\r\n      hasError = true;\r\n    }\r\n    this.setState(\r\n      {\r\n        validationMessages: fieldErrors,\r\n        fullNameValid: !hasError\r\n      },\r\n      this.formValid\r\n    );\r\n  }\r\n\r\n  validateTitle(fieldValue) {\r\n    const fieldErrors = { ...this.state.validationMessages };\r\n    let hasError = false;\r\n\r\n    fieldValue = fieldValue.trim();\r\n    if (fieldValue.length < 3) {\r\n      fieldErrors.title = \"Title must be at least 3 characters long.\";\r\n      hasError = true;\r\n    }\r\n    this.setState(\r\n      {\r\n        validationMessages: fieldErrors,\r\n        titleValid: !hasError\r\n      },\r\n      this.formValid\r\n    );\r\n  }\r\n\r\n  validateBio(fieldValue) {\r\n    const fieldErrors = { ...this.state.validationMessages };\r\n    let hasError = false;\r\n\r\n    fieldValue = fieldValue.trim();\r\n    if (fieldValue.length < 3) {\r\n      fieldErrors.bio = \"Bio must be at least 3 characters long.\";\r\n      hasError = true;\r\n    }\r\n    this.setState(\r\n      {\r\n        validationMessages: fieldErrors,\r\n        bioValid: !hasError\r\n      },\r\n      this.formValid\r\n    );\r\n  }\r\n\r\n  validateGitHub(fieldValue) {\r\n    const fieldErrors = { ...this.state.validationMessages };\r\n    let hasError = false;\r\n\r\n    fieldValue = fieldValue.trim();\r\n    if (!fieldValue.includes(\"github.com\")) {\r\n      fieldErrors.github = \"GitHub URL must contain 'github.com'\";\r\n      hasError = true;\r\n    }\r\n    this.setState(\r\n      {\r\n        validationMessages: fieldErrors,\r\n        githubValid: !hasError\r\n      },\r\n      this.formValid\r\n    );\r\n  }\r\n\r\n  validateLinkedIn(fieldValue) {\r\n    const fieldErrors = { ...this.state.validationMessages };\r\n    let hasError = false;\r\n\r\n    fieldValue = fieldValue.trim();\r\n    if (!fieldValue.includes(\"linkedin.com\")) {\r\n      fieldErrors.linkedin = \"LinkedIn URL must contain 'linkedin.com'\";\r\n      hasError = true;\r\n    }\r\n    this.setState(\r\n      {\r\n        validationMessages: fieldErrors,\r\n        linkedinValid: !hasError\r\n      },\r\n      this.formValid\r\n    );\r\n  }\r\n\r\n  validateEmail(fieldValue) {\r\n    const fieldErrors = { ...this.state.validationMessages };\r\n    let hasError = false;\r\n\r\n    fieldValue = fieldValue.trim();\r\n    let regex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@(([[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    if (!regex.test(fieldValue)) {\r\n      fieldErrors.email = \"Please enter a valid email address\";\r\n      hasError = true;\r\n    }\r\n    this.setState(\r\n      {\r\n        validationMessages: fieldErrors,\r\n        emailValid: !hasError\r\n      },\r\n      this.formValid\r\n    );\r\n  }\r\n\r\n  formValid() {\r\n    this.setState({\r\n      formValid:\r\n        this.state.fullNameValid &&\r\n        this.state.titleValid &&\r\n        this.state.bioValid &&\r\n        this.state.githubValid &&\r\n        this.state.linkedinValid &&\r\n        this.state.emailValid\r\n    });\r\n  }\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    const username = TokenService.parseAuthToken().sub;\r\n    const {\r\n      full_name,\r\n      title,\r\n      bio,\r\n      github_url,\r\n      linkedin_url,\r\n      email_address\r\n    } = this.state;\r\n\r\n    PortfolioApiService.updateUserData(\r\n      username,\r\n      full_name,\r\n      title,\r\n      bio,\r\n      github_url,\r\n      linkedin_url,\r\n      email_address\r\n    )\r\n      .then(\r\n        this.setState({\r\n          full_name,\r\n          title,\r\n          bio,\r\n          github_url,\r\n          linkedin_url,\r\n          email_address,\r\n          successMessage: \"Profile Saved Successfully!\"\r\n        })\r\n      )\r\n      .catch(err => console.error(err));\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      full_name,\r\n      title,\r\n      bio,\r\n      github_url,\r\n      linkedin_url,\r\n      email_address,\r\n      projects\r\n    } = this.state;\r\n\r\n    return (\r\n      <section className=\"dashboard_section\">\r\n        <header role=\"banner\">\r\n          <h1>My Dashboard</h1>\r\n        </header>{\" \"}\r\n        <button className=\"dashboard_button\">View My Portfolio</button>\r\n        <form className=\"dashboard_form\" onSubmit={this.handleSubmit}>\r\n          <h2>About Me</h2>\r\n          <label htmlFor=\"full_name\">Full Name</label>\r\n          <input\r\n            className=\"dashboard_input\"\r\n            type=\"text\"\r\n            name=\"full_name\"\r\n            id=\"full_name\"\r\n            value={full_name}\r\n            onChange={e => this.updateFullName(e.target.value)}\r\n          />\r\n          <ValidationError\r\n            hasError={!this.state.fullNameValid}\r\n            message={this.state.validationMessages.fullName}\r\n            id=\"fullNameError\"\r\n          />\r\n          <label htmlFor=\"title\">Title</label>\r\n          <input\r\n            className=\"dashboard_input\"\r\n            type=\"text\"\r\n            name=\"title\"\r\n            id=\"title\"\r\n            value={title}\r\n            onChange={e => this.updateTitle(e.target.value)}\r\n          />\r\n          <ValidationError\r\n            hasError={!this.state.titleValid}\r\n            message={this.state.validationMessages.title}\r\n            id=\"titleError\"\r\n          />\r\n          <label htmlFor=\"bio\">Bio</label>\r\n          <textarea\r\n            className=\"dashboard_input\"\r\n            name=\"bio\"\r\n            id=\"bio\"\r\n            value={bio}\r\n            onChange={e => this.updateBio(e.target.value)}\r\n          />\r\n          <ValidationError\r\n            hasError={!this.state.bioValid}\r\n            message={this.state.validationMessages.bio}\r\n            id=\"bioError\"\r\n          />\r\n          <label htmlFor=\"github_url\">GitHub URL</label>\r\n          <input\r\n            className=\"dashboard_input\"\r\n            type=\"text\"\r\n            name=\"github_url\"\r\n            id=\"github_url\"\r\n            value={github_url}\r\n            onChange={e => this.updateGitHub(e.target.value)}\r\n          />\r\n          <ValidationError\r\n            hasError={!this.state.githubValid}\r\n            message={this.state.validationMessages.github}\r\n            id=\"githubError\"\r\n          />\r\n          <label htmlFor=\"linkedin_url\">LinkedIn URL</label>\r\n          <input\r\n            className=\"dashboard_input\"\r\n            type=\"text\"\r\n            name=\"linkedin_url\"\r\n            id=\"linkedin_url\"\r\n            value={linkedin_url}\r\n            onChange={e => this.updateLinkedIn(e.target.value)}\r\n          />\r\n          <ValidationError\r\n            hasError={!this.state.linkedinValid}\r\n            message={this.state.validationMessages.linkedin}\r\n            id=\"linkedinError\"\r\n          />\r\n          <label htmlFor=\"email_address\">Email</label>\r\n          <input\r\n            className=\"dashboard_input\"\r\n            type=\"text\"\r\n            name=\"email_address\"\r\n            id=\"email_address\"\r\n            value={email_address}\r\n            onChange={e => this.updateEmail(e.target.value)}\r\n          />\r\n          <ValidationError\r\n            hasError={!this.state.emailValid}\r\n            message={this.state.validationMessages.email}\r\n            id=\"emailError\"\r\n          />\r\n\r\n          <button\r\n            className=\"dashboard_button\"\r\n            type=\"submit\"\r\n            disabled={!this.state.formValid}\r\n          >\r\n            Save Changes\r\n          </button>\r\n          {this.state.successMessage ? (\r\n            <p className=\"success_message\">{this.state.successMessage}</p>\r\n          ) : (\r\n            <></>\r\n          )}\r\n        </form>\r\n        <section className=\"dashboard_projects\">\r\n          <h2>My Projects</h2>\r\n          <button className=\"dashboard_button\">\r\n            <Link className=\"add_project_link\" to={`/add-project`}>\r\n              Add New Project\r\n            </Link>\r\n          </button>\r\n          <ul className=\"projects_list\">\r\n            {projects.map(project => (\r\n              <li className=\"dashboard_project\" key={project.id}>\r\n                <Link\r\n                  className=\"dashboard_project_name\"\r\n                  to={`/edit-project/${project.id}`}\r\n                >\r\n                  {project.name}\r\n                </Link>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </section>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport AppContext from \"../../AppContext\";\r\nimport ValidationError from \"../../components/ValidationError/ValidationError\";\r\nimport PortfolioApiService from \"../../services/portfolio-api-service\";\r\nimport \"./AddProjectPage.css\";\r\n\r\nexport default class AddProjectPage extends Component {\r\n  static contextType = AppContext;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: \"\",\r\n      description: \"\",\r\n      skills: [],\r\n      github_url: \"\",\r\n      demo_url: \"\",\r\n      image_url: \"\",\r\n      nameValid: false,\r\n      descriptionValid: false,\r\n      githubValid: false,\r\n      demoValid: false,\r\n      imageValid: false,\r\n      formValid: false,\r\n      validationMessages: {\r\n        name: \"\",\r\n        description: \"\",\r\n        github: \"\",\r\n        demo: \"\",\r\n        image: \"\"\r\n      },\r\n      skillsList: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    PortfolioApiService.getSkills().then(skillsList => {\r\n      this.setState({ skillsList });\r\n    });\r\n  }\r\n\r\n  updateName(name) {\r\n    this.setState({ name }, () => this.validateName(name));\r\n  }\r\n\r\n  updateDescription(description) {\r\n    this.setState({ description }, () => this.validateDescription(description));\r\n  }\r\n\r\n  updateSkills(checked, skillId) {\r\n    let { skills } = this.state;\r\n    if (checked === true) {\r\n      skills.push(skillId);\r\n    } else {\r\n      skills = skills.filter(skill => skill !== skillId);\r\n    }\r\n    this.setState({ skills });\r\n  }\r\n\r\n  updateGitHub(github_url) {\r\n    this.setState({ github_url }, () => this.validateGitHub(github_url));\r\n  }\r\n\r\n  updateDemo(demo_url) {\r\n    this.setState({ demo_url }, () => this.validateDemo(demo_url));\r\n  }\r\n\r\n  updateImage(image_url) {\r\n    this.setState({ image_url }, () => this.validateImage(image_url));\r\n  }\r\n\r\n  validateName(fieldValue) {\r\n    const fieldErrors = { ...this.state.validationMessages };\r\n    let hasError = false;\r\n\r\n    fieldValue = fieldValue.trim();\r\n    if (fieldValue.length < 2) {\r\n      fieldErrors.name = \"Name must be at least 2 characters long.\";\r\n      hasError = true;\r\n    }\r\n    this.setState(\r\n      {\r\n        validationMessages: fieldErrors,\r\n        nameValid: !hasError\r\n      },\r\n      this.formValid\r\n    );\r\n  }\r\n\r\n  validateDescription(fieldValue) {\r\n    const fieldErrors = { ...this.state.validationMessages };\r\n    let hasError = false;\r\n\r\n    fieldValue = fieldValue.trim();\r\n    if (fieldValue.length < 3) {\r\n      fieldErrors.description =\r\n        \"Description must be at least 3 characters long.\";\r\n      hasError = true;\r\n    }\r\n    this.setState(\r\n      {\r\n        validationMessages: fieldErrors,\r\n        descriptionValid: !hasError\r\n      },\r\n      this.formValid\r\n    );\r\n  }\r\n\r\n  validateGitHub(fieldValue) {\r\n    const fieldErrors = { ...this.state.validationMessages };\r\n    let hasError = false;\r\n\r\n    fieldValue = fieldValue.trim();\r\n    if (!fieldValue.includes(\"github.com\")) {\r\n      fieldErrors.github = \"GitHub URL must contain 'github.com'\";\r\n      hasError = true;\r\n    }\r\n    this.setState(\r\n      {\r\n        validationMessages: fieldErrors,\r\n        githubValid: !hasError\r\n      },\r\n      this.formValid\r\n    );\r\n  }\r\n\r\n  validateDemo(fieldValue) {\r\n    const fieldErrors = { ...this.state.validationMessages };\r\n    let hasError = false;\r\n\r\n    fieldValue = fieldValue.trim();\r\n    if (!fieldValue.includes(\".\") || fieldValue.length < 3) {\r\n      fieldErrors.demo =\r\n        \"Please provide a valid URL for your live app / demo site\";\r\n      hasError = true;\r\n    }\r\n    this.setState(\r\n      {\r\n        validationMessages: fieldErrors,\r\n        demoValid: !hasError\r\n      },\r\n      this.formValid\r\n    );\r\n  }\r\n\r\n  validateImage(fieldValue) {\r\n    const fieldErrors = { ...this.state.validationMessages };\r\n    let hasError = false;\r\n\r\n    fieldValue = fieldValue.trim();\r\n    if (!fieldValue.includes(\".\") || fieldValue.length < 3) {\r\n      fieldErrors.image = \"Please provide a valid URL for your image\";\r\n      hasError = true;\r\n    }\r\n    this.setState(\r\n      {\r\n        validationMessages: fieldErrors,\r\n        imageValid: !hasError\r\n      },\r\n      this.formValid\r\n    );\r\n  }\r\n\r\n  formValid() {\r\n    this.setState({\r\n      formValid:\r\n        this.state.nameValid &&\r\n        this.state.descriptionValid &&\r\n        this.state.githubValid &&\r\n        this.state.demoValid &&\r\n        this.state.imageValid\r\n    });\r\n  }\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    const {\r\n      name,\r\n      description,\r\n      skills,\r\n      github_url,\r\n      demo_url,\r\n      image_url\r\n    } = this.state;\r\n\r\n    PortfolioApiService.createProject(\r\n      name,\r\n      description,\r\n      skills,\r\n      github_url,\r\n      demo_url,\r\n      image_url\r\n    ).catch(err => console.error(err));\r\n\r\n    this.props.history.push(\"/dashboard\");\r\n  };\r\n\r\n  render() {\r\n    const { skillsList } = this.state;\r\n\r\n    return (\r\n      <section className=\"add_project_section\">\r\n        <header role=\"banner\">\r\n          <h1 className=\"add_form_header\">Add New Project</h1>\r\n        </header>{\" \"}\r\n        <form className=\"add_project_form\" onSubmit={this.handleSubmit}>\r\n          <h2>\r\n            Fill out and save the fields below to add your project to your\r\n            profile:\r\n          </h2>\r\n          <label htmlFor=\"name\">Project Name</label>\r\n          <input\r\n            className=\"form_input text_input\"\r\n            type=\"text\"\r\n            name=\"name\"\r\n            id=\"name\"\r\n            placeholder=\"e.g., My Super Awesome Project\"\r\n            onChange={e => this.updateName(e.target.value)}\r\n          />\r\n          <ValidationError\r\n            hasError={!this.state.nameValid}\r\n            message={this.state.validationMessages.name}\r\n            id=\"nameError\"\r\n          />\r\n          <label htmlFor=\"description\">Description</label>\r\n          <textarea\r\n            className=\"form_input text_input\"\r\n            name=\"description\"\r\n            id=\"description\"\r\n            placeholder=\"1-2 sentences describing of your project...\"\r\n            onChange={e => this.updateDescription(e.target.value)}\r\n          />\r\n          <ValidationError\r\n            hasError={!this.state.descriptionValid}\r\n            message={this.state.validationMessages.description}\r\n            id=\"descriptionError\"\r\n          />\r\n          <fieldset className=\"form_input\">\r\n            <legend>Technologies Used</legend>\r\n            <div className=\"checkbox_group\">\r\n              {skillsList.map(skill => (\r\n                <div key={skill.id} className=\"checkbox_div\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    name=\"project_skills\"\r\n                    value={skill.id}\r\n                    id={skill.name}\r\n                    onChange={e =>\r\n                      this.updateSkills(e.target.checked, skill.id)\r\n                    }\r\n                  />\r\n                  <label htmlFor={skill.name}>{skill.name}</label>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </fieldset>\r\n          <label htmlFor=\"github_url\">GitHub URL</label>\r\n          <input\r\n            className=\"form_input text_input\"\r\n            type=\"text\"\r\n            name=\"github_url\"\r\n            id=\"github_url\"\r\n            placeholder=\"link to your project's GitHub repo...\"\r\n            onChange={e => this.updateGitHub(e.target.value)}\r\n          />\r\n          <ValidationError\r\n            hasError={!this.state.githubValid}\r\n            message={this.state.validationMessages.github}\r\n            id=\"githubError\"\r\n          />\r\n          <label htmlFor=\"demo_url\">Demo URL</label>\r\n          <input\r\n            className=\"form_input text_input\"\r\n            type=\"text\"\r\n            name=\"demo_url\"\r\n            id=\"demo_url\"\r\n            placeholder=\"link to live app / demo site...\"\r\n            onChange={e => this.updateDemo(e.target.value)}\r\n          />\r\n          <ValidationError\r\n            hasError={!this.state.demoValid}\r\n            message={this.state.validationMessages.demo}\r\n            id=\"demoError\"\r\n          />\r\n          <label htmlFor=\"image_url\">Image URL</label>\r\n          <input\r\n            className=\"form_input text_input\"\r\n            type=\"text\"\r\n            name=\"image_url\"\r\n            id=\"image_url\"\r\n            placeholder=\"link to image / screenshot of your app / website...\"\r\n            onChange={e => this.updateImage(e.target.value)}\r\n          />\r\n          <ValidationError\r\n            hasError={!this.state.imageValid}\r\n            message={this.state.validationMessages.image}\r\n            id=\"imageError\"\r\n          />\r\n\r\n          <button\r\n            className=\"form_button\"\r\n            type=\"submit\"\r\n            disabled={!this.state.formValid}\r\n          >\r\n            Save Project\r\n          </button>\r\n          {this.state.successMessage ? (\r\n            <p className=\"success_message\">{this.state.successMessage}</p>\r\n          ) : (\r\n            <></>\r\n          )}\r\n        </form>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n//import TokenService from \"../../services/token-service\";\r\n\r\nexport default class EditProjectPage extends Component {\r\n  render() {\r\n    // const currentUserId = TokenService.parseAuthToken().user_id;\r\n    // if (currentUserId != project.user_id) {\r\n    //   return <h1>Unauthorized</h1>;\r\n    // }\r\n    return <h1>Edit Project</h1>;\r\n  }\r\n}\r\n","import config from \"../config\";\r\nimport TokenService from \"./token-service\";\r\nimport IdleService from \"./idle-service\";\r\n\r\nconst AuthApiService = {\r\n  postUser(user) {\r\n    return fetch(`${config.API_ENDPOINT}/users`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"content-type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(user)\r\n    })\r\n      .then(res =>\r\n        !res.ok ? res.json().then(e => Promise.reject(e)) : res.json()\r\n      )\r\n      .then(res => {\r\n        /*\r\n        whenever a registration is performed:\r\n        1. save the token in local storage\r\n        2. queue auto logout when the user goes idle\r\n        3. queue a call to the refresh endpoint based on the JWT's exp value\r\n      */\r\n        TokenService.saveAuthToken(res.authToken);\r\n        IdleService.regiserIdleTimerResets();\r\n        TokenService.queueCallbackBeforeExpiry(() => {\r\n          AuthApiService.postRefreshToken();\r\n        });\r\n        return res;\r\n      });\r\n  },\r\n  postLogin({ user_name, password }) {\r\n    return fetch(`${config.API_ENDPOINT}/auth/login`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"content-type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify({ user_name, password })\r\n    })\r\n      .then(res =>\r\n        !res.ok ? res.json().then(e => Promise.reject(e)) : res.json()\r\n      )\r\n      .then(res => {\r\n        /*\r\n          whenever a login is performed:\r\n          1. save the token in local storage\r\n          2. queue auto logout when the user goes idle\r\n          3. queue a call to the refresh endpoint based on the JWT's exp value\r\n        */\r\n        TokenService.saveAuthToken(res.authToken);\r\n        IdleService.regiserIdleTimerResets();\r\n        TokenService.queueCallbackBeforeExpiry(() => {\r\n          AuthApiService.postRefreshToken();\r\n        });\r\n        return res;\r\n      });\r\n  },\r\n  postRefreshToken() {\r\n    return fetch(`${config.API_ENDPOINT}/auth/refresh`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        authorization: `Bearer ${TokenService.getAuthToken()}`\r\n      }\r\n    })\r\n      .then(res =>\r\n        !res.ok ? res.json().then(e => Promise.reject(e)) : res.json()\r\n      )\r\n      .then(res => {\r\n        /*\r\n          similar logic to whenever a user logs in, the only differences are:\r\n          - we don't need to queue the idle timers again as the user is already logged in.\r\n          - we'll catch the error here as this refresh is happening behind the scenes\r\n        */\r\n        TokenService.saveAuthToken(res.authToken);\r\n        TokenService.queueCallbackBeforeExpiry(() => {\r\n          AuthApiService.postRefreshToken();\r\n        });\r\n        return res;\r\n      })\r\n      .catch(err => {\r\n        console.log(\"refresh token request error\");\r\n        console.error(err);\r\n      });\r\n  }\r\n};\r\n\r\nexport default AuthApiService;\r\n","import React, { Component } from \"react\";\r\nimport AuthApiService from \"../../services/auth-api-service\";\r\nimport { Button, Input } from \"../Utils/Utils\";\r\nimport \"./LoginForm.css\";\r\n\r\nexport default class LoginForm extends Component {\r\n  static defaultProps = {\r\n    onLoginSuccess: () => {}\r\n  };\r\n\r\n  state = { error: null };\r\n\r\n  handleSubmitJwtAuth = ev => {\r\n    ev.preventDefault();\r\n    this.setState({ error: null });\r\n    const { user_name, password } = ev.target;\r\n\r\n    AuthApiService.postLogin({\r\n      user_name: user_name.value,\r\n      password: password.value\r\n    })\r\n      .then(res => {\r\n        user_name.value = \"\";\r\n        password.value = \"\";\r\n        this.props.onLoginSuccess();\r\n      })\r\n      .catch(res => {\r\n        this.setState({ error: res.error });\r\n      });\r\n  };\r\n\r\n  render() {\r\n    const { error } = this.state;\r\n    return (\r\n      <form className=\"LoginForm\" onSubmit={this.handleSubmitJwtAuth}>\r\n        <div id=\"loginError\" role=\"alert\">\r\n          {error && <p className=\"red\">{error}</p>}\r\n        </div>\r\n        <div className=\"user_name\">\r\n          <label htmlFor=\"user_name\">User name</label>\r\n          <Input\r\n            required\r\n            name=\"user_name\"\r\n            id=\"user_name\"\r\n            aria-required=\"true\"\r\n            aria-label=\"user name\"\r\n            aria-describedby=\"loginError\"\r\n          />\r\n        </div>\r\n        <div className=\"password\">\r\n          <label htmlFor=\"password\">Password</label>\r\n          <Input\r\n            required\r\n            name=\"password\"\r\n            type=\"password\"\r\n            id=\"password\"\r\n            aria-required=\"true\"\r\n            aria-label=\"password\"\r\n            aria-describedby=\"loginError\"\r\n          />\r\n        </div>\r\n        <Button className=\"login_button\" type=\"submit\">\r\n          Login\r\n        </Button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport LoginForm from \"../../components/LoginForm/LoginForm\";\r\nimport { Section } from \"../../components/Utils/Utils\";\r\nimport AppContext from \"../../AppContext\";\r\nimport TokenService from \"../../services/token-service\";\r\n\r\nexport default class LoginPage extends Component {\r\n  static contextType = AppContext;\r\n\r\n  static defaultProps = {\r\n    location: {},\r\n    history: {\r\n      push: () => {}\r\n    }\r\n  };\r\n\r\n  handleLoginSuccess = async () => {\r\n    const { location, history } = this.props;\r\n    const destination = (location.state || {}).from || \"/dashboard\";\r\n    history.push(destination);\r\n    await this.context.setLoggedIn();\r\n    const jwtPayload = await TokenService.parseAuthToken();\r\n    await this.context.setUser({\r\n      id: jwtPayload.user_id,\r\n      name: jwtPayload.name,\r\n      username: jwtPayload.sub\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Section className=\"LoginPage\">\r\n        <h1>Login</h1>\r\n        <LoginForm onLoginSuccess={this.handleLoginSuccess} />\r\n        <h2 className=\"demo_header\">Demo Account:</h2>\r\n        <p className=\"demo_creds\">Username: demo</p>\r\n        <p className=\"demo_creds\">Password: Demo123#</p>\r\n      </Section>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Button, Input, Required } from \"../Utils/Utils\";\r\nimport AuthApiService from \"../../services/auth-api-service\";\r\nimport \"./RegistrationForm.css\";\r\n\r\nexport default class RegistrationForm extends Component {\r\n  static defaultProps = {\r\n    onRegistrationSuccess: () => {}\r\n  };\r\n\r\n  state = { error: null };\r\n\r\n  handleSubmit = ev => {\r\n    ev.preventDefault();\r\n    const { user_name, full_name, password } = ev.target;\r\n\r\n    this.setState({ error: null });\r\n    AuthApiService.postUser({\r\n      user_name: user_name.value,\r\n      full_name: full_name.value,\r\n      password: password.value\r\n    })\r\n      .then(user => {\r\n        user_name.value = \"\";\r\n        full_name.value = \"\";\r\n        password.value = \"\";\r\n        this.props.onRegistrationSuccess();\r\n      })\r\n      .catch(res => {\r\n        this.setState({ error: res.error });\r\n      });\r\n  };\r\n\r\n  render() {\r\n    const { error } = this.state;\r\n    return (\r\n      <form className=\"RegistrationForm\" onSubmit={this.handleSubmit}>\r\n        <div id=\"registrationError\" role=\"alert\">\r\n          {error && <p className=\"red\">{error}</p>}\r\n        </div>\r\n        <div className=\"user_name\">\r\n          <label htmlFor=\"user_name\">\r\n            User name <Required />\r\n          </label>\r\n          <Input\r\n            name=\"user_name\"\r\n            type=\"text\"\r\n            required\r\n            id=\"user_name\"\r\n            aria-required=\"true\"\r\n            aria-label=\"user name\"\r\n            aria-describedby=\"registrationError\"\r\n          />\r\n        </div>\r\n        <div className=\"full_name\">\r\n          <label htmlFor=\"full_name\">\r\n            Full name <Required />\r\n          </label>\r\n          <Input\r\n            name=\"full_name\"\r\n            type=\"text\"\r\n            required\r\n            id=\"full_name\"\r\n            aria-required=\"true\"\r\n            aria-label=\"user name\"\r\n            aria-describedby=\"registrationError\"\r\n          />\r\n        </div>\r\n        <div className=\"password\">\r\n          <label htmlFor=\"password\">\r\n            Password <Required />\r\n          </label>\r\n          <Input\r\n            name=\"password\"\r\n            type=\"password\"\r\n            required\r\n            id=\"password\"\r\n            aria-required=\"true\"\r\n            aria-label=\"password\"\r\n            aria-describedby=\"registrationError\"\r\n          />\r\n        </div>\r\n        <Button className=\"registration_button\" type=\"submit\">\r\n          Register\r\n        </Button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Section } from \"../../components/Utils/Utils\";\r\nimport RegistrationForm from \"../../components/RegistrationForm/RegistrationForm\";\r\nimport AppContext from \"../../AppContext\";\r\nimport TokenService from \"../../services/token-service\";\r\n\r\nexport default class RegistrationPage extends Component {\r\n  static contextType = AppContext;\r\n\r\n  static defaultProps = {\r\n    history: {\r\n      push: () => {}\r\n    }\r\n  };\r\n\r\n  handleRegistrationSuccess = async user => {\r\n    const { location, history } = this.props;\r\n    const destination = (location.state || {}).from || \"/dashboard\";\r\n    history.push(destination);\r\n    await this.context.setLoggedIn();\r\n    const jwtPayload = await TokenService.parseAuthToken();\r\n    await this.context.setUser({\r\n      id: jwtPayload.user_id,\r\n      name: jwtPayload.name,\r\n      username: jwtPayload.sub\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Section className=\"RegistrationPage\">\r\n        <h1>Register</h1>\r\n        <RegistrationForm\r\n          onRegistrationSuccess={this.handleRegistrationSuccess}\r\n        />\r\n        <h2>Password Requirements:</h2>\r\n        <p>Password must be at least 8 characters long</p>\r\n        <p>\r\n          Password must contain at least one upper case letter, lower case\r\n          letter, number and special character\r\n        </p>\r\n        <p>Password must be less than 72 characters</p>\r\n        <p>Password must not start or end with empty spaces</p>\r\n      </Section>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport TokenService from \"../../services/token-service\";\r\n\r\nexport default function PublicOnlyRoute({ component, ...props }) {\r\n  const Component = component;\r\n  // if user is logged in, redirect to home page, otherwise render component\r\n  return (\r\n    <Route\r\n      {...props}\r\n      render={componentProps =>\r\n        TokenService.hasAuthToken() ? (\r\n          <Redirect to={\"/dashboard\"} />\r\n        ) : (\r\n          <Component {...componentProps} />\r\n        )\r\n      }\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport TokenService from \"../../services/token-service\";\r\n\r\nexport default function PrivateRoute({ component, ...props }) {\r\n  const Component = component;\r\n  // if user is logged in, render component, otherwise redirect to login page\r\n  return (\r\n    <Route\r\n      {...props}\r\n      render={componentProps =>\r\n        TokenService.hasAuthToken() ? (\r\n          <Component {...componentProps} />\r\n        ) : (\r\n          <Redirect\r\n            to={{\r\n              pathname: \"/login\",\r\n              state: { from: componentProps.location }\r\n            }}\r\n          />\r\n        )\r\n      }\r\n    />\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./NotFoundPage.css\";\r\n\r\nexport default class NotFoundPage extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1 className=\"not_found_header\">404 - Page not found</h1>\r\n        <p>Try going back to your previous page.</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport AppContext from \"../../AppContext\";\r\nimport Header from \"../Header/Header\";\r\nimport LandingPage from \"../LandingPage/LandingPage\";\r\nimport Dashboard from \"../Dashboard/Dashboard\";\r\nimport AddProjectPage from \"../../routes/AddProjectPage/AddProjectPage\";\r\nimport EditProjectPage from \"../../routes/EditProjectPage/EditProjectPage\";\r\nimport LoginPage from \"../../routes/LoginPage/LoginPage\";\r\nimport RegistrationPage from \"../../routes/RegistrationPage/RegistrationPage\";\r\nimport PublicOnlyRoute from \"../Utils/PublicOnlyRoute\";\r\nimport PrivateRoute from \"../Utils/PrivateRoute\";\r\nimport TokenService from \"../../services/token-service\";\r\nimport AuthApiService from \"../../services/auth-api-service\";\r\nimport IdleService from \"../../services/idle-service\";\r\nimport NotFoundPage from \"../NotFoundPage/NotFoundPage\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    loggedIn: false,\r\n    user: {}\r\n  };\r\n\r\n  async componentDidMount() {\r\n    // check if user is currently logged in, and if so, call setUser function to store user credentials\r\n    await this.setState({\r\n      loggedIn: TokenService.hasAuthToken()\r\n    });\r\n\r\n    if (this.state.loggedIn) {\r\n      const jwtPayload = TokenService.parseAuthToken();\r\n      await this.setUser({\r\n        id: jwtPayload.user_id,\r\n        name: jwtPayload.name,\r\n        username: jwtPayload.sub\r\n      });\r\n    }\r\n\r\n    /*\r\n      set the function (callback) to call when a user goes idle\r\n      we'll set this to logout a user when they're idle\r\n    */\r\n    IdleService.setIdleCallback(this.logoutFromIdle);\r\n\r\n    /* if a user is logged in */\r\n    if (TokenService.hasAuthToken()) {\r\n      /*\r\n      tell the idle service to register event listeners\r\n      the event listeners are fired when a user does something, e.g. move their mouse\r\n      if the user doesn't trigger one of these event listeners,\r\n        the idleCallback (logout) will be invoked\r\n    */\r\n      IdleService.regiserIdleTimerResets();\r\n\r\n      /*\r\n      Tell the token service to read the JWT, looking at the exp value\r\n      and queue a timeout just before the token expires\r\n    */\r\n      TokenService.queueCallbackBeforeExpiry(() => {\r\n        /* the timoue will call this callback just before the token expires */\r\n        AuthApiService.postRefreshToken();\r\n      });\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    /*\r\n    when the app unmounts,\r\n    stop the event listeners that auto logout (clear the token from storage)\r\n  */\r\n    IdleService.unRegisterIdleResets();\r\n    /*\r\n    and remove the refresh endpoint request\r\n  */\r\n    TokenService.clearCallbackBeforeExpiry();\r\n  }\r\n\r\n  logoutFromIdle = () => {\r\n    /* remove the token from localStorage */\r\n    TokenService.clearAuthToken();\r\n    /* remove any queued calls to the refresh endpoint */\r\n    TokenService.clearCallbackBeforeExpiry();\r\n    /* remove the timeouts that auto logout when idle */\r\n    IdleService.unRegisterIdleResets();\r\n    /*\r\n    react won't know the token has been removed from local storage,\r\n    so we need to tell React to rerender\r\n  */\r\n    this.setState({\r\n      loggedIn: false\r\n    });\r\n  };\r\n\r\n  // check if user is logged in and update state accordingly\r\n  setLoggedIn = () => {\r\n    this.setState({\r\n      loggedIn: TokenService.hasAuthToken()\r\n    });\r\n  };\r\n\r\n  // store user credentials in state\r\n  setUser = user => {\r\n    this.setState({\r\n      user\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const contextValue = {\r\n      loggedIn: this.state.loggedIn,\r\n      setLoggedIn: this.setLoggedIn,\r\n      user: this.state.user,\r\n      setUser: this.setUser\r\n    };\r\n\r\n    return (\r\n      <AppContext.Provider value={contextValue}>\r\n        <header>\r\n          <Header />\r\n        </header>\r\n        <main className=\"App\" role=\"main\">\r\n          <Switch>\r\n            <Route exact path={\"/\"} component={LandingPage} />\r\n            <PrivateRoute path={\"/dashboard\"} component={Dashboard} />\r\n            <PrivateRoute\r\n              path={\"/edit-project/:project_id\"}\r\n              component={EditProjectPage}\r\n            />\r\n            <PrivateRoute path={\"/add-project\"} component={AddProjectPage} />\r\n            <PublicOnlyRoute path={\"/login\"} component={LoginPage} />\r\n            <PublicOnlyRoute path={\"/register\"} component={RegistrationPage} />\r\n            <Route component={NotFoundPage} />\r\n          </Switch>\r\n        </main>\r\n      </AppContext.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport App from \"./components/App/App\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}